from sympy import sin, pi
import numpy as np
import matplotlib.pyplot as plt

# Parámetros del problema
a = 1      # Longitud en x
b = 1      # Longitud en y
k = 0.1    # Coeficiente de difusión
N = 100    # Número de puntos en la discretización
t = 0.4    # Tiempo en el cual se evalúa la solución

# Función inicial
def f(x, y):
    return np.sin(np.pi * x) * np.sin(np.pi * y)

# Discretización del dominio
x = np.linspace(0, a, N)
y = np.linspace(0, b, N)
X, Y = np.meshgrid(x, y)
fdiscreto = f(X, Y)

# Transformada de Fourier
F = np.fft.fft2(fdiscreto)
F_shifted = np.fft.fftshift(F)

# Frecuencias
kx = np.fft.fftshift(np.fft.fftfreq(N, d=a/N) * 2 * np.pi)
ky = np.fft.fftshift(np.fft.fftfreq(N, d=b/N) * 2 * np.pi)
Kx, Ky = np.meshgrid(kx, ky)

# Decremento exponencial en el dominio de frecuencias
decay = np.exp(-(Kx**2 + Ky**2) * k * t)
F_decay = F_shifted * decay

# Transformada inversa de Fourier
u = np.fft.ifft2(np.fft.ifftshift(F_decay))
u_real = np.real(u)

# Gráfico de la solución
plt.contourf(x, y, u_real, cmap='viridis')
plt.colorbar()
plt.xlabel('x')
plt.ylabel('y')
plt.title(f'Onda de calor en t={t}')
plt.show()
